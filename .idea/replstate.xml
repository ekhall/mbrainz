<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1422119010407">{:repl-history {:ide [], :local [&quot;(d/q '[:find ?title ?album ?year\n       :in $ ?artist-name\n       :where\n       [?a :artist/name   ?artist-name]\n       [?t :track/artists ?a]\n       [?t :track/name    ?title]\n       [?m :medium/tracks ?t]\n       [?r :release/media ?m]\n       [?r :release/name  ?album]\n       [?r :release/year  ?year]]\n     db\n     \&quot;John Lennon\&quot;)&quot; &quot;(d/q '[:find ?title ?album ?year\n       :in $ ?artist-name\n       :where\n       [?a :artist/name   ?artist-name]\n       [?t :track/artists ?a]\n       [?t :track/name    ?title]\n       [?m :medium/tracks ?t]\n       [?r :release/media ?m]\n       [?r :release/name  ?album]\n       [?r :release/year  ?year]\n       [(&lt;= ?year 1980)]]\n     db\n     \&quot;John Lennon\&quot;)&quot; &quot;(d/q '[:find ?title ?album ?year\n       :in $ % ?artist-name\n       :where\n       [?a :artist/name   ?artist-name]\n       [?t :track/artists ?a]\n       [?t :track/name    ?title]\n       (track-release ?t ?r)\n       [?r :release/name  ?album]\n       [?r :release/year  ?year]]\n     db\n     rules\n     \&quot;John Lennon\&quot;)&quot; &quot;(d/q '[:find ?title ?artist ?album ?year\n       :in $ % ?search\n       :where\n       (track-search ?search ?track)\n       (track-info ?track ?title ?artist ?album ?year)]\n     db\n     rules\n     \&quot;always\&quot;)&quot; &quot;(d/q '[:find ?aname ?aname2\n       :in $ % [?aname ...]\n       :where (collab ?aname ?aname2)]\n     db rules [\&quot;John Lennon\&quot; \&quot;Paul McCartney\&quot; \&quot;George Harrison\&quot; \&quot;Ringo Starr\&quot;])&quot; &quot;(d/q '[:find ?aname ?aname2\n       :in $ % [?aname ...]\n       :where (collab-net-2 ?aname ?aname2)]\n     db\n     rules\n     [\&quot;John Lennon\&quot; \&quot;Paul McCartney\&quot; \&quot;George Harrison\&quot; \&quot;Ringo Starr\&quot;])&quot; &quot;(d/q query\n     db\n     rules\n     (d/q query\n          db\n          rules\n          [[\&quot;John Lennon\&quot; \&quot;Paul McCartney\&quot; \&quot;George Harrison\&quot; \&quot;Ringo Starr\&quot;]]))&quot; &quot;(def query '[:find ?aname2\n             :in $ % [[?aname]]\n             :where (collab ?aname ?aname2)])&quot; &quot;(d/q '[:find ?aname ?tname\n       :in $ ?artist-name\n       :where\n       [?a :artist/name ?artist-name]\n       [?t :track/artists ?a]\n       [?t :track/name ?tname]\n       [(!= \&quot;Outro\&quot; ?tname)]\n       [(!= \&quot;[outro]\&quot; ?tname)]\n       [(!= \&quot;Intro\&quot; ?tname)]\n       [(!= \&quot;[intro]\&quot; ?tname)]\n       [?t2 :track/name ?tname]\n       [?t2 :track/artists ?a2]\n       [(!= ?a2 ?a)]\n       [?a2 :artist/name ?aname]]\n     db\n     \&quot;The Who\&quot;)&quot; &quot;(ns datomic.samples.mbrainz\n  (:require [clojure.pprint :refer (pprint)]\n            [datomic.api :as d]\n            [clojure.pprint :as pp]\n            [datomic.samples.mbrainz.rules :refer (rules)]))&quot; &quot;(def uri \&quot;datomic:free://localhost:4334/mbrainz-1968-1973\&quot;)&quot; &quot;(def conn (d/connect uri))&quot; &quot;(def db (d/db conn))&quot; &quot;(set! *print-length* 250)&quot; &quot;(d/q '[:find ?title\n       :in $ ?artist-name\n       :where\n       [?a :artist/name ?artist-name]\n       [?t :track/artists ?a]\n       [?t :track/name ?title]]\n     db\n     \&quot;John Lennon\&quot;)&quot;], :remote []}}</component>
</project>